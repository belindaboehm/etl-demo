{
	"name": "dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "inventory",
						"type": "DatasetReference"
					},
					"name": "inventory",
					"description": "my card inventory"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "mtginventory",
						"type": "DatasetReference"
					},
					"name": "output"
				}
			],
			"transformations": [
				{
					"name": "colourIdentityDerivation",
					"description": "derive colour identity - doesn't handle multicoloured"
				},
				{
					"name": "filterColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Count as string,",
				"          {Tradelist Count} as string,",
				"          Name as string,",
				"          Edition as string,",
				"          {Edition Code} as string,",
				"          {Card Number} as string,",
				"          Condition as string,",
				"          Language as string,",
				"          Foil as string,",
				"          Signed as string,",
				"          {Artist Proof} as string,",
				"          {Altered Art} as string,",
				"          Misprint as string,",
				"          Promo as string,",
				"          Textless as string,",
				"          {Printing Id} as string,",
				"          {Printing Note} as string,",
				"          Tags as string,",
				"          {My Price} as string,",
				"          Type as string,",
				"          Cost as string,",
				"          Rarity as string,",
				"          Price as string,",
				"          {Image URL} as string,",
				"          {Last Updated} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> inventory",
				"inventory derive(colourIdentity = iif(instr(Cost, 'B')>0, 'Black', \r",
				"    iif(instr(Cost, 'W')>0, 'White', \r",
				"    iif(instr(Cost, 'R')>0, 'Red',\r",
				"    iif(instr(Cost, 'U')>0, 'Blue',\r",
				"    iif(instr(Cost, 'W')>0, 'White', \r",
				"    iif(isNull(Cost), 'Land','Colourless')))))),",
				"          overallPrice = toDecimal(right(Price, length(Price)-1))*toDecimal(Count)) ~> colourIdentityDerivation",
				"colourIdentityDerivation select(mapColumn(",
				"          Name,",
				"          Count,",
				"          Edition,",
				"          {Edition Code},",
				"          Condition,",
				"          Language,",
				"          Foil,",
				"          Type,",
				"          ManaCost = Cost,",
				"          ColourIdentity = colourIdentity,",
				"          Rarity,",
				"          Price,",
				"          OverallPrice = overallPrice,",
				"          {Last Updated}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> filterColumns",
				"filterColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> output"
			]
		}
	}
}