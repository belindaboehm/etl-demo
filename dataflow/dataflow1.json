{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "inventory",
						"type": "DatasetReference"
					},
					"name": "inventory",
					"description": "my card inventory"
				},
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "cards",
					"description": "list of all mtg cards"
				},
				{
					"dataset": {
						"referenceName": "sets",
						"type": "DatasetReference"
					},
					"name": "set"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "mtginventory",
						"type": "DatasetReference"
					},
					"name": "output"
				}
			],
			"transformations": [
				{
					"name": "join"
				},
				{
					"name": "select1"
				},
				{
					"name": "setJoin"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Count as string,",
				"          {Tradelist Count} as string,",
				"          Name as string,",
				"          Edition as string,",
				"          {Edition Code} as string,",
				"          {Card Number} as string,",
				"          Condition as string,",
				"          Language as string,",
				"          Foil as string,",
				"          Signed as string,",
				"          {Artist Proof} as string,",
				"          {Altered Art} as string,",
				"          Misprint as string,",
				"          Promo as string,",
				"          Textless as string,",
				"          {Printing Id} as string,",
				"          {Printing Note} as string,",
				"          Tags as string,",
				"          {My Price} as string,",
				"          Type as string,",
				"          Cost as string,",
				"          Rarity as string,",
				"          Price as string,",
				"          {Image URL} as string,",
				"          {Last Updated} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> inventory",
				"source(output(",
				"          artist as string,",
				"          artistIds as string,",
				"          asciiName as string,",
				"          attractionLights as string,",
				"          availability as string,",
				"          boosterTypes as string,",
				"          borderColor as string,",
				"          cardParts as string,",
				"          colorIdentity as string,",
				"          colorIndicator as string,",
				"          colors as string,",
				"          defense as string,",
				"          duelDeck as string,",
				"          edhrecRank as double,",
				"          edhrecSaltiness as double,",
				"          faceConvertedManaCost as double,",
				"          faceFlavorName as string,",
				"          faceManaValue as double,",
				"          faceName as string,",
				"          finishes as string,",
				"          flavorName as string,",
				"          flavorText as string,",
				"          frameEffects as string,",
				"          frameVersion as string,",
				"          hand as string,",
				"          hasAlternativeDeckLimit as boolean,",
				"          hasContentWarning as boolean,",
				"          hasFoil as boolean,",
				"          hasNonFoil as boolean,",
				"          isAlternative as boolean,",
				"          isFullArt as boolean,",
				"          isFunny as boolean,",
				"          isOnlineOnly as boolean,",
				"          isOversized as boolean,",
				"          isPromo as boolean,",
				"          isRebalanced as boolean,",
				"          isReprint as boolean,",
				"          isReserved as boolean,",
				"          isStarter as boolean,",
				"          isStorySpotlight as boolean,",
				"          isTextless as boolean,",
				"          isTimeshifted as boolean,",
				"          keywords as string,",
				"          language as string,",
				"          layout as string,",
				"          leadershipSkills as string,",
				"          life as string,",
				"          loyalty as string,",
				"          manaCost as string,",
				"          manaValue as double,",
				"          name as string,",
				"          number as string,",
				"          originalPrintings as string,",
				"          originalReleaseDate as string,",
				"          originalText as string,",
				"          originalType as string,",
				"          otherFaceIds as string,",
				"          power as string,",
				"          printings as string,",
				"          promoTypes as string,",
				"          rarity as string,",
				"          rebalancedPrintings as string,",
				"          relatedCards as string,",
				"          securityStamp as string,",
				"          setCode as string,",
				"          side as string,",
				"          signature as string,",
				"          sourceProducts as string,",
				"          subsets as string,",
				"          subtypes as string,",
				"          supertypes as string,",
				"          text as string,",
				"          toughness as string,",
				"          type as string,",
				"          types as string,",
				"          uuid as string,",
				"          variations as string,",
				"          watermark as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> cards",
				"source(output(",
				"          baseSetSize as long,",
				"          block as string,",
				"          cardsphereSetId as double,",
				"          code as string,",
				"          isFoilOnly as boolean,",
				"          isForeignOnly as boolean,",
				"          isNonFoilOnly as boolean,",
				"          isOnlineOnly as boolean,",
				"          isPartialPreview as boolean,",
				"          keyruneCode as string,",
				"          languages as string,",
				"          mcmId as double,",
				"          mcmIdExtras as double,",
				"          mcmName as string,",
				"          mtgoCode as string,",
				"          name as string,",
				"          parentCode as string,",
				"          releaseDate as string,",
				"          tcgplayerGroupId as double,",
				"          tokenSetCode as string,",
				"          totalSetSize as long,",
				"          type as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> set",
				"inventory, setJoin join(inventory@Name == cards@name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join",
				"join select(mapColumn(",
				"          name = cards@name,",
				"          count = Count,",
				"          colorIdentity,",
				"          manaCost,",
				"          Edition,",
				"          Foil,",
				"          {Edition Code},",
				"          EditionName = mcmName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"cards, set join(setCode == code,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> setJoin",
				"setJoin select(mapColumn(",
				"          setCode,",
				"          code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> output"
			]
		}
	}
}